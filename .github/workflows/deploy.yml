name: Test & Deploy Node app to EC2

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Create release tarball
        run: |
          tar --exclude='.git' --exclude='node_modules' -czf release.tar.gz .

      - name: Add SSH key (from secret) and known_hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo SSH_OK && uname -a"

      - name: Copy release to EC2 (scp)
        run: |
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no release.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/release.tar.gz

      - name: Deploy on EC2 (untar, install, restart)
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            mkdir -p "${{ secrets.SERVER_DIR }}"
            tar -xzf /home/${{ secrets.EC2_USER }}/release.tar.gz -C "${{ secrets.SERVER_DIR }}"
            cd "${{ secrets.SERVER_DIR }}"
            npm ci --production
            # replace 'myapp' and 'app.js' with your app name/start file if different
            pm2 restart myapp || pm2 start app.js --name "myapp"
            pm2 save
          EOF
